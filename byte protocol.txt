==========================================================================
              DLT Implementation and Internals (2019/20)
                     Blockchain Byte Protocol

Written by:
Karl Bezzina, Ryan Falzon, Martin Camilleri, Christian Bajada, Alex Zammit
==========================================================================

Notes: 
* All multi-byte numeric values should be encoded in big-endian.
* Hashes are 32 byte wide dumps
* Pub Keys are 64/65-byte wide dumps (see PubKey/Signature Field Width)
 

<STX><LEN><OPID><OBJ><ETX>

<STX>: ASCII CHARACTER 2
<LEN>: 2 bytes which indicates the number of bytes in <OPID> + <OBJ>. big-endian
<OPID>: a single char/byte operation identifier
<OBJ>: Defined in this standard
<ETX>: ASCII CHARACTER 3

====================

Request: GET_COUNT
<OPID>: 'a' = 0x61
<OBJ>: None

This is a fixed UDP message that should always match:
<STX><LEN><OPID><OBJ><ETX> = 32-00-01-61-33

====================

Response: COUNT
<OPID>: 'c' = 0x63
<OBJ>: number of blocks, 32-bit, big-endian

<STX><LEN><OPID><OBJ><ETX> = 32-00-05-63-xx-xx-xx-xx-33

====================

Request: GET_BLOCK_HASHES
<OPID>: 'b' = 0x62
<OBJ>: None
<STX><LEN><OPID><OBJ><ETX> = 32-00-01-62-33

====================

Response: BLOCK_HASHES
<OPID>: 'h' = 0x68
<OBJ>: A back-to-back dump of hashes. Each taking up 32-bytes

Note: 
* Hashes are fixed width 32 byte dumps
* No delimiters are needed the length is enough for us to know exactly 
  how many hashes are included

Consider this:
<STX><LEN><OPID><OBJ><ETX>

If Number of Hashes is N
<LEN> = N * 32 + 1


Sending 4 hashes would look like this:
<LEN> = 32*4 + 1 = 129 = 0x81

<STX><LEN><OPID><OBJ><ETX> = 
32-xx-xx-68-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-33
32-00-81-68-<hash1>-<hash2>-<hash3>-<hash4>-33

====================

Request: REQ_BLOCK

<OPID>: 'r' = 0x72
<OBJ>: 32-byte hash dump

We always have the same len value:
<LEN> = 33 = 0x21 

<STX><LEN><OPID><OBJ><ETX> = 
32-00-21-72-<hash>-33

====================

Response: BLOCK

<OPID>: 'x' = 0x78
<OBJ>: <hash><nonce><prev_hash><timestamp><transactions>

<hash>      = 32-byte fixed width hash

<nonce>     =  4-byte/32-bit big-endian integer

<prev_hash> = 32-byte fixed width hash. 
              For first block we set all the 32 bytes to zero. 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00

<timestamp> =  4-byte/32-bit big-endian integer


<transactions> = <tran item1><tran item2><tran item3><tran item4>

Note: again we have an array of fixed length items so the <LEN> value is enough to give us all we need.

             Non-UTXO                                                 UTXO

<tran item> = <hash><unused><from_ac><to_ac>            <tran item> = <hash><hash_utxo><from_ac><to_ac>
<hash>      = 32-byte fixed width hash                  <hash>      = 32-byte fixed width hash
<unused>    = 32-byte all set to zero                   <hash_utxo> = 32-byte fixed width hash
<from_ac>   = 64/65-byte public key dump                <from_ac>   = 64/65-byte signature dump
<to_ac>     = 64/65-byte public key dump                <to_ac>     = 64/65-byte public key dump
<timestamp> =  4-byte/32-bit big-endian integer         <timestamp> =  4-byte/32-bit big-endian integer


Note: 
 Here we are catering for 2 different modes Account Based (Non-UTXO) and UTXO.
 The 2 cases require slightly different trx info. However we adopt a protocol 
 that can accommodate both.

 The field width for <from_ac> and <to_ac> is not being specified with a hard value.
 Implementations can choose between using 64-bytes or 65-bytes. The reasons for this 
 is described in detail in a separate file (see PubKey/Signature Field Width)

 Non-UTXO | <unused> - should always be set to all zeros

 Non-UTXO | <from_ac> - set this to the sender public key. In case of coinbase set it
                        to all zeros such that to always retain the chosen field width 
                        of 64/65-byte

 UTXO | <hash_utxo> - set this to the hash of the transaction being spent. 
                      set this to all zeros in case of coinbase

 UTXO | <from_ac> - set this to the digital signature for the UTXO being spent. 
                    set this to all zeros in case of coinbase


 Depending on chosen field width for the public keys and digital signatures the
 transaction item will always have a fixed length:

 For 64-byte public keys/signatures:
 Transaction Length = 32+32+64+64+4= 196
 Looking at this:
 <STX><LEN><OPID><OBJ><ETX>
 <LEN> = 1 + 32 + 4 + 32 + 4 + 196*<number of transactions>


 For 65-byte public keys/signatures:
 Transaction Length = 32+32+65+65+4= 198
 Looking at this:
 <STX><LEN><OPID><OBJ><ETX>
 <LEN> = 1 + 32 + 4 + 32 + 4 + 198*<number of transactions>
 
 The field <timestamp> within transactions should be set at the timestamp of when the transaction 
 is inserted in the mining pool. For coinbase transactions, this should be the timestamp that the 
 coinbase was created.

====================

Response: NEW_BLOCK
<OPID>: 'z' = 0x7A
<OBJ>: <hash><nonce><prev_hash><timestamp><transactions>


============================
Generating Hashes/Signatures
============================

The specs requires the generation of 2 hashes and a signature.
We here clarify how these are to be generated.

Block Hash
==========

Block Data = <hash><nonce><prev_hash><timestamp><transactions>
<hash> = Hash(<nonce><prev_hash><timestamp><transactions>)


Transaction Hash
================

             Non-UTXO                                                 UTXO

<tran item> = <hash><unused><from_ac><to_ac>            <tran item> = <hash><hash_utxo><from_ac><to_ac>
<hash> = Hash(<unused><from_ac><to_ac><timestamp>)      <hash> = Hash(<hash_utxo><from_ac><to_ac><timestamp>)
                                                        <hash_utxo> = <hash> of transaction being spent

UTXO Signature
==============

In UTXO the signature to be set in <from_ac> should be generated as follows:
<from_ac> = Sign(<hash_utxo>)


Verifying this signature will involve the following steps.
Keep in mind that here we have 2 transactions:
a) Transaction being spent (the UTXO)
b) The spending transaction (the TXI)

1. Lookup the UTXO i.e. the transaction being spent
   UTXO is the Transaction 
      Where UTXO.<hash> == TXI.<hash_utxo>
 

2. Determine the spender's public key:
   pubkey = UTXO.<to_ac>


3. Verify the spending transaction signature.
   signature = TXI.<from_ac>
   data = TXI.<hash_utxo>
   Verify(signature, data, pubkey)


PubKey/Signature Field Width
============================

 The size of public keys and ditgital signatures can vary.

 For example in Ethereum we can work with compressed or uncompressed pub keys. 
 Furhtermore we also have the prefixed and unprefixed pub keys.

 Likwise the signature can include the recovery bit causing a length variation 
 between 64 bytes and 65 bytes

 Depending on the libraries in use one may find working with 1 type of 
 pub key/signature as more convinient over another.

 Since this assignment does not require syncing different node implementations
 standardizing these lengths is not necessary. 

 What is important is that lengths are used consistently.


References/Notes
================
https://cryptobook.nakov.com/digital-signatures
ECDSA-secp256k1 (Signature size)
64 bytes (512 bits) or 
65 bytes (513 bits) with the public key recovery bit
